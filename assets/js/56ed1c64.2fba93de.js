"use strict";(self.webpackChunkmiddy=self.webpackChunkmiddy||[]).push([[455],{7770:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"events/intro","title":"All AWS Events","description":"Middy is built to help with all AWS Events that can connect with AWS Lambda.","source":"@site/docs/events/01-intro.md","sourceDirName":"events","slug":"/events/intro","permalink":"/docs/events/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/middyjs/middy/tree/main/website/docs/events/01-intro.md","tags":[],"version":"current","lastUpdatedAt":1750110598000,"sidebarPosition":1,"frontMatter":{"title":"All AWS Events","position":1},"sidebar":"tutorialSidebar","previous":{"title":"AWS Event Examples","permalink":"/docs/category/aws-event-examples"},"next":{"title":"Alexa","permalink":"/docs/events/alexa"}}');var a=t(4848),s=t(8453);const d={title:"All AWS Events",position:1},o=void 0,i={},c=[{value:"Middlewares that can benefit any Lambda",id:"middlewares-that-can-benefit-any-lambda",level:2},{value:"Need secrets? We have you covered there too",id:"need-secrets-we-have-you-covered-there-too",level:2},{value:"How about configs? We have you covered there as well",id:"how-about-configs-we-have-you-covered-there-as-well",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Middy is built to help with all AWS Events that can connect with AWS Lambda."}),"\n",(0,a.jsx)(n.h2,{id:"middlewares-that-can-benefit-any-lambda",children:"Middlewares that can benefit any Lambda"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import middy from '@middy/core'\nimport cloudWatchMetricsMiddleware from '@middy/cloudwatch-metrics'\nimport errorLoggerMiddleware from '@middy/error-logger'\nimport inputOutputLoggerMiddleware from '@middy/input-output-logger'\nimport validatorMiddleware from 'validator'\nimport warmupMiddleware from 'warmup'\n\nimport eventSchema from './eventSchema.json' assert { type: 'json' }\nimport responseSchema from './responseSchema.json' assert { type: 'json' }\n\nconst handler = middy()\n  .use(warmupMiddleware())\n  .use(cloudWatchMetricsMiddleware())\n  .use(inputOutputLoggerMiddleware())\n  .use(errorLoggerMiddleware())\n  .use(validatorMiddleware({ eventSchema, responseSchema }))\n  .handler(async (event, context, { signal }) => {\n    // ...\n  })\n"})}),"\n",(0,a.jsx)(n.h2,{id:"need-secrets-we-have-you-covered-there-too",children:"Need secrets? We have you covered there too"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import middy from '@middy/core'\nimport { getInternal } from '@middy/util'\nimport rdsSignerMiddleware from '@middy/rds-signer'\nimport secretsManagerMiddleware from '@middy/secrets-manager'\nimport ssmMiddleware from '@middy/ssm'\nimport stsMiddleware from '@middy/sts'\n\nexport const handler = middy()\n  .use(\n    rdsSignerMiddleware({\n      fetchData: {\n        rdsSigner: {\n          region: process.env.AWS_REGION,\n          hostname: process.env.RDS_HOSTNAME,\n          username: 'iam_role',\n          port: 5555\n        }\n      }\n    })\n  )\n  .use(\n    secretsManagerMiddleware({\n      fetchData: {\n        secretsManager: '/dev/service_name/key_name'\n      }\n    })\n  )\n  .use(\n    ssmMiddleware({\n      fetchData: {\n        ssm: '/dev/service_name/key_name'\n      }\n    })\n  )\n  .use(\n    stsMiddleware({\n      fetchData: {\n        sts: {\n          RoleArn: '.../role'\n        }\n      }\n    })\n  )\n  .before(async (request) => {\n    request.context.secrets = await getInternal(true, request)\n  })\n  .handler(async (event, context, { signal }) => {\n    // context.secrets = { rdsSigner, secretsManager, ssm, sts }\n  })\n"})}),"\n",(0,a.jsx)(n.h2,{id:"how-about-configs-we-have-you-covered-there-as-well",children:"How about configs? We have you covered there as well"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import middy from '@middy/core'\nimport { getInternal } from '@middy/util'\nimport appConfigMiddleware from '@middy/appconfig'\nimport s3Middleware from '@middy/s3'\nimport dynamoDBMiddleware from '@middy/dynamodb'\nimport ssmMiddleware from '@middy/ssm'\n\nexport const handler = middy()\n  .use(\n    appConfigMiddleware({\n      fetchData: {\n        appConfig: {\n          Application: '...',\n          ClientId: '...',\n          Configuration: '...',\n          Environment: '...'\n        }\n      }\n    })\n  )\n  .use(\n    s3Middleware({\n      fetchData: {\n        s3: {\n          Bucket: '...',\n          Key: '...'\n        }\n      }\n    })\n  )\n  .use(\n    dynamoDBMiddleware({\n      fetchData: {\n        dynamodb: {\n          TableName: '...',\n          Key: { '...' }\n        }\n      }\n    })\n  )\n  .use(\n    ssmMiddleware({\n      fetchData: {\n        ssm: '/dev/service_name/key_name'\n      }\n    })\n  )\n  .before(async (request) => {\n    request.context.configs = await getInternal(true, request)\n  })\n  .handler(async (event, context, { signal }) => {\n    // context.configs = { appConfig, dynamodb, s3, ssm }\n  })\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var r=t(6540);const a={},s=r.createContext(a);function d(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);