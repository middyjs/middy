"use strict";(self.webpackChunkmiddy=self.webpackChunkmiddy||[]).push([[7710],{1385:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"middlewares/validator","title":"validator","description":"This middleware automatically validates incoming events and outgoing responses against custom","source":"@site/docs/middlewares/validator.md","sourceDirName":"middlewares","slug":"/middlewares/validator","permalink":"/docs/middlewares/validator","draft":false,"unlisted":false,"editUrl":"https://github.com/middyjs/middy/tree/main/website/docs/middlewares/validator.md","tags":[],"version":"current","lastUpdatedAt":1750110598000,"frontMatter":{"title":"validator"},"sidebar":"tutorialSidebar","previous":{"title":"sts","permalink":"/docs/middlewares/sts"},"next":{"title":"warmup","permalink":"/docs/middlewares/warmup"}}');var t=a(4848),s=a(8453),l=a(1470),i=a(9365);const o={title:"validator"},d=void 0,c={},u=[{value:"Install",id:"install",level:2},{value:"Options",id:"options",level:2},{value:"transpileSchema",id:"transpileschema",level:2},{value:"transpileLocale",id:"transpilelocale",level:2},{value:"Sample usage",id:"sample-usage",level:2},{value:"Pre-transpiling example (recommended)",id:"pre-transpiling-example-recommended",level:2},{value:"Transpile during cold-start",id:"transpile-during-cold-start",level:2},{value:"Transpile during cold-start with default messages",id:"transpile-during-cold-start-with-default-messages",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This middleware automatically validates incoming events and outgoing responses against custom\nschemas defined with the ",(0,t.jsx)(n.a,{href:"http://json-schema.org/",children:"JSON schema syntax"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Want to use another validator? Try one of the community validators:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/middy-ajv",children:"ajv"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/middy-sparks-joi",children:"middy-sparks-joi"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If an incoming event fails validation a ",(0,t.jsx)(n.code,{children:"BadRequest"})," error is raised.\nIf an outgoing response fails validation a ",(0,t.jsx)(n.code,{children:"InternalServerError"})," error is\nraised."]}),"\n",(0,t.jsxs)(n.p,{children:["This middleware can be used in combination with\n",(0,t.jsx)(n.a,{href:"#httperrorhandler",children:(0,t.jsx)(n.code,{children:"httpErrorHandler"})})," to automatically return the right\nresponse to the user."]}),"\n",(0,t.jsxs)(n.p,{children:["It can also be used in combination with ",(0,t.jsx)(n.a,{href:"#httpContentNegotiation",children:(0,t.jsx)(n.code,{children:"http-content-negotiation"})})," to load localized translations for the error messages (based on the currently requested language). This feature uses internally ",(0,t.jsx)(n.a,{href:"http://npm.im/ajv-ftl-i18n",children:(0,t.jsx)(n.code,{children:"ajv-ftl-i18n"})})," module, so reference to this module for options and more advanced use cases. By default the language used will be English (",(0,t.jsx)(n.code,{children:"en"}),"), but you can redefine the default language by passing it in the ",(0,t.jsx)(n.code,{children:"ajvOptions"})," options with the key ",(0,t.jsx)(n.code,{children:"defaultLanguage"})," and specifying as value one of the ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/ajv-i18n#supported-locales",children:"supported locales"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Also, this middleware accepts an object with plugins to be applied to customize the internal ",(0,t.jsx)(n.code,{children:"ajv"})," instance."]}),"\n",(0,t.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,t.jsx)(n.p,{children:"To install this middleware you can use NPM:"}),"\n",(0,t.jsxs)(l.A,{groupId:"npm2yarn",children:[(0,t.jsx)(i.A,{value:"npm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install --save @middy/validator\nnpm install --save-dev ajv-cmd # Optional: for pre-transpiling\n"})})}),(0,t.jsx)(i.A,{value:"yarn",label:"Yarn",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn add @middy/validator\nyarn add --dev ajv-cmd # Optional: for pre-transpiling\n"})})}),(0,t.jsx)(i.A,{value:"pnpm",label:"pnpm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm add @middy/validator\npnpm add --save-dev ajv-cmd # Optional: for pre-transpiling\n"})})}),(0,t.jsx)(i.A,{value:"bun",label:"Bun",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"bun add @middy/validator\nbun add --dev ajv-cmd # Optional: for pre-transpiling\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eventSchema"})," (function) (default ",(0,t.jsx)(n.code,{children:"undefined"}),"): The compiled ajv validator that will be used\nto validate the input (",(0,t.jsx)(n.code,{children:"request.event"}),") of the Lambda handler."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"contextSchema"})," (function) (default ",(0,t.jsx)(n.code,{children:"undefined"}),"): The compiled ajv validator that will be used\nto validate the input (",(0,t.jsx)(n.code,{children:"request.context"}),") of the Lambda handler. Has additional support for ",(0,t.jsx)(n.code,{children:"typeof"})," keyword to allow validation of ",(0,t.jsx)(n.code,{children:'"typeof":"function"'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"responseSchema"})," (function) (default ",(0,t.jsx)(n.code,{children:"undefined"}),"): The compiled ajv validator that will be used\nto validate the output (",(0,t.jsx)(n.code,{children:"request.response"}),") of the Lambda handler."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"i18nEnabled"})," (boolean) (default ",(0,t.jsx)(n.code,{children:"true"}),"): Option to disable i18n default package."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"defaultLanguage"})," (string) (default ",(0,t.jsx)(n.code,{children:"en"}),"): When language not found, what language to fallback to."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"languages"})," (object) (default: ",(0,t.jsx)(n.code,{children:"{}"}),"): Localization overrides"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"NOTES:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["At least one of ",(0,t.jsx)(n.code,{children:"eventSchema"})," or ",(0,t.jsx)(n.code,{children:"responseSchema"})," is required."]}),"\n",(0,t.jsxs)(n.li,{children:["If you'd like to have the error details as part of the response, it will need to be handled separately. You can access them from ",(0,t.jsx)(n.code,{children:"request.error.cause.data"}),", the original response can be found at ",(0,t.jsx)(n.code,{children:"request.error.response"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Important"})," Transpiling schemas & locales on the fly will cause a 50-150ms performance hit during cold start for simple JSON Schemas. Precompiling is highly recommended."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"transpileschema",children:"transpileSchema"}),"\n",(0,t.jsxs)(n.p,{children:["Transpile JSON-Schema in to JavaScript. Default ajv plugins used: ",(0,t.jsx)(n.code,{children:"ajv-i18n"}),", ",(0,t.jsx)(n.code,{children:"ajv-formats"}),", ",(0,t.jsx)(n.code,{children:"ajv-formats-draft2019"}),", ",(0,t.jsx)(n.code,{children:"ajv-keywords"}),", ",(0,t.jsx)(n.code,{children:"ajv-errors"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"schema"})," (object) (required): JSON-Schema object"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ajvOptions"})," (object) (default ",(0,t.jsx)(n.code,{children:"undefined"}),"): Options to pass to ",(0,t.jsx)(n.a,{href:"https://ajv.js.org/docs/api.html#options",children:"ajv"}),"\nclass constructor. Defaults are ",(0,t.jsx)(n.code,{children:"{ strict: true, coerceTypes: 'array', allErrors: true, useDefaults: 'empty', messages: true }"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"transpilelocale",children:"transpileLocale"}),"\n",(0,t.jsxs)(n.p,{children:["Transpile Fluent (.ftl) localization file into ajv compatible format. Allows the overriding of the default messages and adds support for multi-language ",(0,t.jsx)(n.code,{children:"errrorMessages"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ftl"})," (string) (required): Contents of an ftl file to be transpiled."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"sample-usage",children:"Sample usage"}),"\n",(0,t.jsx)(n.p,{children:"Example for event validation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import middy from '@middy/core'\nimport validator from '@middy/validator'\nimport { transpileSchema } from '@middy/validator/transpile'\n\nconst lambdaHandler = (event, context) => {\n  return {}\n}\n\nconst schema = {\n  type: 'object',\n  required: ['body', 'foo'],\n  properties: {\n    // this will pass validation\n    body: {\n      type: 'string'\n    },\n    // this won't as it won't be in the event\n    foo: {\n      type: 'string'\n    }\n  }\n}\n\nexport const handler = middy()\n  .use(\n    validator({\n      eventSchema: transpileSchema(schema)\n    })\n  )\n  .handler(lambdaHandler)\n\n// invokes the handler, note that property foo is missing\nconst event = {\n  body: JSON.stringify({ something: 'somethingelse' })\n}\nhandler(event, {}, (err, res) => {\n  equal(err.message, 'Event object failed validation')\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example for response validation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import middy from '@middy/core'\nimport validator from '@middy/validator'\nimport { transpileSchema } from '@middy/validator/transpile'\n\nconst lambdaHandler = (event, context) => {\n  return {}\n}\n\nconst responseSchema = transpileSchema({\n  type: 'object',\n  required: ['body', 'statusCode'],\n  properties: {\n    body: {\n      type: 'object'\n    },\n    statusCode: {\n      type: 'number'\n    }\n  }\n})\n\nexport const handler = middy()\n  .use(validator({ responseSchema }))\n  .handler(lambdaHandler)\n\n//\nhandler({}, {}, (err, response) => {\n  notEqual(err, null)\n  equal(err.message, 'Response object failed validation')\n  expect(response).not.toBe(null)\n  // it doesn't destroy the response so it can be used by other middlewares\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example for body validation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import middy from '@middy/core'\nimport httpJsonBodyParser from '@middy/http-json-body-parser'\nimport validator from '@middy/validator'\nimport { transpileSchema } from '@middy/validator/transpile'\n\nconst lambdaHandler = (event, context) => {\n  return {}\n}\n\nconst eventSchema = {\n  type: 'object',\n  required: ['body'],\n  properties: {\n    body: {\n      type: 'object',\n      required: ['name', 'email'],\n      properties: {\n        name: { type: 'string' },\n        email: { type: 'string', format: 'email' }\n        // schema options https://ajv.js.org/json-schema.html#json-data-type\n      }\n    }\n  }\n}\n\nexport const handler = middy()\n  // to validate the body we need to parse it first\n  .use(httpJsonBodyParser())\n  .use(\n    validator({\n      eventSchema: transpileSchema(eventSchema)\n    })\n  )\n  .handler(lambdaHandler)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"pre-transpiling-example-recommended",children:"Pre-transpiling example (recommended)"}),"\n",(0,t.jsx)(n.p,{children:"Run a build script to before running tests & deployment."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"#!/usr/bin/env bash\n\n# This is an example, should be customize to meet ones needs\n# Powered by `ajv-cmd`\n# $ ajv --help\n\nbundle () {\n  ajv validate ${1} --valid \\\n    --strict true --coerce-types array --all-errors true --use-defaults empty\n  ajv transpile ${1} \\\n  --strict true --coerce-types array --all-errors true --use-defaults empty \\\n  -o ${1%.json}.js\n}\n\nfor file in handlers/*/schema.*.json; do\n  bundle $file\ndone\n\nlocale () {\n  LOCALE=$(basename ${1%.ftl})\n  ajv ftl ${1} --locale ${LOCALE} -o ${1%.ftl}.js\n}\n\nfor file in handlers/*/*.ftl; do\n  locale $file\ndone\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import middy from '@middy/core'\nimport validator from '@middy/validator'\nimport eventSchema from './schema.event.js'\nimport en from './en.js'\nimport fr from './fr.js'\n\nconst lambdaHandler = (event, context) => {\n  return {}\n}\n\nexport const handler = middy()\n  .use(\n    validator({\n      eventSchema,\n      languages: { en, fr }\n    })\n  )\n  .handler(lambdaHandler)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"transpile-during-cold-start",children:"Transpile during cold-start"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { readFile } from 'node:fs/promises'\nimport middy from '@middy/core'\nimport validator from '@middy/validator'\nimport { transpileSchema, transpileLocale } from '@middy/validator/transpile'\nimport eventSchema from './schema.event.json'\n\nconst lambdaHandler = (event, context) => {\n  return {}\n}\n\nconst en = transpileLocale(await readFile('./en.ftl'))\nconst fr = transpileLocale(await readFile('./fr.ftl'))\n\nexport const handler = middy()\n  .use(\n    validator({\n      eventSchema: transpileSchema(eventSchema),\n      languages: { en, fr }\n    })\n  )\n  .handler(lambdaHandler)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"transpile-during-cold-start-with-default-messages",children:"Transpile during cold-start with default messages"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { readFile } from 'node:fs/promises'\nimport middy from '@middy/core'\nimport validator from '@middy/validator'\nimport { transpileSchema, transpileLocale } from '@middy/validator/transpile'\nimport { en, fr } from 'ajv-ftl-i18n' // `ajv-i18n` can also be used\nimport eventSchema from './schema.event.json'\n\nconst lambdaHandler = (event, context) => {\n  return {}\n}\n\nexport const handler = middy()\n  .use(\n    validator({\n      eventSchema: transpileSchema(eventSchema),\n      languages: { en, fr }\n    })\n  )\n  .handler(lambdaHandler)\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1470:(e,n,a)=>{a.d(n,{A:()=>w});var r=a(6540),t=a(4164),s=a(3104),l=a(6347),i=a(205),o=a(7485),d=a(1682),c=a(679);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((({props:{value:e,label:n,attributes:a,default:r}})=>({value:e,label:n,attributes:a,default:r})))}(a);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function m({value:e,tabValues:n}){return n.some((n=>n.value===e))}function p({queryString:e=!1,groupId:n}){const a=(0,l.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(t),(0,r.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(a.location.search);n.set(t,e),a.replace({...a.location,search:n.toString()})}),[t,a])]}function f(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,s=h(e),[l,o]=(0,r.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[d,u]=p({queryString:a,groupId:t}),[f,v]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,t]=(0,c.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:t}),j=(()=>{const e=d??f;return m({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{j&&o(j)}),[j]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),v(e)}),[u,v,s]),tabValues:s}}var v=a(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=a(4848);function g({className:e,block:n,selectedValue:a,selectValue:r,tabValues:l}){const i=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.a_)(),d=e=>{const n=e.currentTarget,t=i.indexOf(n),s=l[t].value;s!==a&&(o(n),r(s))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=i.indexOf(e.currentTarget)+1;n=i[a]??i[0];break}case"ArrowLeft":{const a=i.indexOf(e.currentTarget)-1;n=i[a]??i[i.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:l.map((({value:e,label:n,attributes:r})=>(0,x.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{i.push(e)},onKeyDown:c,onClick:d,...r,className:(0,t.A)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":a===e}),children:n??e},e)))})}function b({lazy:e,children:n,selectedValue:a}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function y(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,t.A)("tabs-container",j.tabList),children:[(0,x.jsx)(g,{...n,...e}),(0,x.jsx)(b,{...n,...e})]})}function w(e){const n=(0,v.A)();return(0,x.jsx)(y,{...e,children:u(e.children)},String(n))}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>i});var r=a(6540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}},9365:(e,n,a)=>{a.d(n,{A:()=>l});a(6540);var r=a(4164);const t={tabItem:"tabItem_Ymn6"};var s=a(4848);function l({children:e,hidden:n,className:a}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(t.tabItem,a),hidden:n,children:e})}}}]);