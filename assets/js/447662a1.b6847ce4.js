"use strict";(self.webpackChunkmiddy=self.webpackChunkmiddy||[]).push([[4146],{8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>d});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},8761:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"writing-middlewares/configurable-middlewares","title":"Configurable Middlewares","description":"In order to make middlewares configurable, they are generally exported as a function that accepts","source":"@site/docs/writing-middlewares/02-configurable-middlewares.md","sourceDirName":"writing-middlewares","slug":"/writing-middlewares/configurable-middlewares","permalink":"/docs/writing-middlewares/configurable-middlewares","draft":false,"unlisted":false,"editUrl":"https://github.com/middyjs/middy/tree/main/website/docs/writing-middlewares/02-configurable-middlewares.md","tags":[],"version":"current","lastUpdatedAt":1750110598000,"sidebarPosition":2,"frontMatter":{"title":"Configurable Middlewares","position":2},"sidebar":"tutorialSidebar","previous":{"title":"Custom Middlewares","permalink":"/docs/writing-middlewares/intro"},"next":{"title":"Inline Middlewares","permalink":"/docs/writing-middlewares/inline-middlewares"}}');var s=r(4848),i=r(8453);const o={title:"Configurable Middlewares",position:2},d=void 0,a={},l=[];function c(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["In order to make middlewares configurable, they are generally exported as a function that accepts\na configuration object. This function should then return the middleware object with ",(0,s.jsx)(n.code,{children:"before"}),",\n",(0,s.jsx)(n.code,{children:"after"}),", and ",(0,s.jsx)(n.code,{children:"onError"})," as keys."]}),"\n",(0,s.jsx)(n.p,{children:"E.g."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// customMiddleware.js\n\nconst defaults = {}\n\nconst customMiddleware = (opts) => {\n  const options = { ...defaults, ...opts }\n\n  const customMiddlewareBefore = async (request) => {\n    const { event, context } = request\n    // ...\n  }\n\n  const customMiddlewareAfter = async (request) => {\n    const { response } = request\n    // ...\n    request.response = response\n  }\n\n  const customMiddlewareOnError = async (request) => {\n    if (request.response === undefined) return\n    await customMiddlewareAfter(request)\n  }\n\n  return {\n    before: customMiddlewareBefore,\n    after: customMiddlewareAfter,\n    onError: customMiddlewareOnError\n  }\n}\n\nexport default customMiddleware\n"})}),"\n",(0,s.jsx)(n.p,{children:"With this convention in mind, using a middleware will always look like the following example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import middy from '@middy/core'\nimport customMiddleware from 'customMiddleware.js'\n\nconst lambdaHandler = async (event, context) => {\n  // do stuff\n  return {}\n}\n\nexport const handler = middy()\n  .use(\n    customMiddleware({\n      option1: 'foo',\n      option2: 'bar'\n    })\n  )\n  .handler(lambdaHandler)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);