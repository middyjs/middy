"use strict";(self.webpackChunkmiddy=self.webpackChunkmiddy||[]).push([[1028],{8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>l});var t=r(6540);const o={},s=t.createContext(o);function d(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),t.createElement(s.Provider,{value:n},e.children)}},9825:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"routers/ws-router","title":"ws-router","description":"This handler can route to requests to one of a nested handler based on routeKey of an WebSocket event from API Gateway (WebSocket).","source":"@site/docs/routers/ws-router.md","sourceDirName":"routers","slug":"/routers/ws-router","permalink":"/docs/routers/ws-router","draft":false,"unlisted":false,"editUrl":"https://github.com/middyjs/middy/tree/main/website/docs/routers/ws-router.md","tags":[],"version":"current","lastUpdatedAt":1750110598000,"frontMatter":{"title":"ws-router"},"sidebar":"tutorialSidebar","previous":{"title":"http-router","permalink":"/docs/routers/http-router"},"next":{"title":"Upgrade","permalink":"/docs/category/upgrade"}}');var o=r(4848),s=r(8453);const d={title:"ws-router"},l=void 0,i={},a=[{value:"Install",id:"install",level:2},{value:"Options",id:"options",level:2},{value:"Sample usage",id:"sample-usage",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["This handler can route to requests to one of a nested handler based on ",(0,o.jsx)(n.code,{children:"routeKey"})," of an WebSocket event from API Gateway (WebSocket)."]}),"\n",(0,o.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,o.jsx)(n.p,{children:"To install this middleware you can use NPM:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install --save @middy/ws-router\n"})}),"\n",(0,o.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"routes"})," (array[{routeKey, handler}]) (required): Array of route objects.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"routeKey"})," (string) (required): AWS formatted route key. ie ",(0,o.jsx)(n.code,{children:"$connect"}),", ",(0,o.jsx)(n.code,{children:"$disconnect"}),", ",(0,o.jsx)(n.code,{children:"$default"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"handler"})," (function) (required): Any ",(0,o.jsx)(n.code,{children:"handler(event, context, {signal})"})," function"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"notFoundHandler"})," (function): Override default 404 error thrown with your own custom response. Passes in ",(0,o.jsx)(n.code,{children:"{routeKey}"})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"NOTES:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Errors should be handled as part of the router middleware stack ",(0,o.jsx)(n.strong,{children:"or"})," the lambdaHandler middleware stack. Handled errors in the later will trigger the ",(0,o.jsx)(n.code,{children:"after"})," middleware stack of the former."]}),"\n",(0,o.jsx)(n.li,{children:"Shared middlewares, connected to the router middleware stack, can only be run before the lambdaHandler middleware stack."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"sample-usage",children:"Sample usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import middy from '@middy/core'\nimport wsRouterHandler from '@middy/ws-router'\nimport wsResponseMiddleware from '@middy/ws-response'\nimport validatorMiddleware from '@middy/validator'\n\nconst connectHandler = middy()\n  .use(validatorMiddleware({eventSchema: {...} }))\n  .handler((event, context) => {\n    return 'connected'\n  })\n\nconst disconnectHandler = middy()\n  .use(validatorMiddleware({eventSchema: {...} }))\n  .handler((event, context) => {\n    return 'disconnected'\n  })\n\nconst routes = [\n  {\n    routeKey: '$connect',\n    handler: connectHandler\n  },\n  {\n    routeKey: '$disconnect',\n    handler: disconnectHandler\n  }\n]\n\nexport const handler = middy()\n  .use(wsResponseMiddleware())\n  .handler(wsRouterHandler(routes))\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);