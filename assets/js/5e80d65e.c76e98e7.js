"use strict";(self.webpackChunkmiddy=self.webpackChunkmiddy||[]).push([[6493],{7874:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"intro/hooks","title":"Hooks","description":"Middy provides hooks into it\'s core to allow for monitoring, setup, and cleaning that may not be possible within a middleware.","source":"@site/docs/intro/07-hooks.md","sourceDirName":"intro","slug":"/intro/hooks","permalink":"/docs/intro/hooks","draft":false,"unlisted":false,"editUrl":"https://github.com/middyjs/middy/tree/main/website/docs/intro/07-hooks.md","tags":[],"version":"current","lastUpdatedAt":1750110598000,"sidebarPosition":7,"frontMatter":{"title":"Hooks","position":2},"sidebar":"tutorialSidebar","previous":{"title":"Use with TypeScript","permalink":"/docs/intro/typescript"},"next":{"title":"History","permalink":"/docs/intro/history"}}');var o=t(4848),i=t(8453);const s={title:"Hooks",position:2},d=void 0,c={},a=[];function l(e){const r={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.p,{children:"Middy provides hooks into it's core to allow for monitoring, setup, and cleaning that may not be possible within a middleware."}),"\n",(0,o.jsx)(r.p,{children:"In order of execution"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"beforePrefetch"}),"(): Triggered once before middlewares are attached and prefetches are executed."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"requestStart"}),"(): Triggered on every request before the first middleware."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"beforeMiddleware"}),"/",(0,o.jsx)(r.code,{children:"afterMiddleware"}),"(fctName): Triggered before/after every ",(0,o.jsx)(r.code,{children:"before"}),", ",(0,o.jsx)(r.code,{children:"after"}),", and ",(0,o.jsx)(r.code,{children:"onError"})," middleware function. The function name is passed in, this is why all middlewares use a verbose naming pattern."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"beforeHandler"}),"/",(0,o.jsx)(r.code,{children:"afterHandler"}),"(): Triggered before/after the handler."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"requestEnd"}),"(request): Triggered right before the response is returned, including thrown errors."]}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["See ",(0,o.jsx)(r.a,{href:"https://middy.js.org/docs/best-practices/profiling",children:"Profiling"})," for example usage."]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>d});var n=t(6540);const o={},i=n.createContext(o);function s(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);